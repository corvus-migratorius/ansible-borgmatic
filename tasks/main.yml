---
- name: "Ensure pip and dependencies are installed"
  ansible.builtin.apt:
    name:
      - python3-pip
      - python3-venv
    state: present
    update_cache: true
    cache_valid_time: 3600

- name: "Install pipx"
  ansible.builtin.pip:
    name: "pipx=={{ pipx_version }}"
    executable: pip3

- name: "Ensure pipx binary is available in PATH"
  changed_when: false
  ansible.builtin.command:
    cmd: pipx ensurepath

- name: "Install borgmatic via pipx"
  environment:
    PIPX_BIN_DIR: "{{ borgmatic_pipx_bin_dir }}"
  community.general.pipx:
    name: borgmatic
    state: present
    install_deps: true

- name: "Install Borg if the correct version is not available"
  block:
    # we are looking for Borg installed in a directory that Max Hoesel's role exects to find it
    - name: "Get the currently installed version of Borg"
      changed_when: false
      register: borg_version_installed
      ansible.builtin.command:
        cmd: /usr/bin/borg --version

    - name: "Check that the correct version of Borg is installed"
      ansible.builtin.assert:
        that: borg_version_installed.stdout.find(borg_version)
        fail_msg: "The expected Borg version was not found: {{ borg_version_installed }}"
        success_msg: "Found the expected Borg version ({{ borg_version }})"

  rescue:
    - name: "Download Borg from a custom URL: '{{ borg_binary_url }}'"
      retries: 3
      delay: 1
      ansible.builtin.unarchive:
        src: "{{ borg_binary_url }}"
        dest: "/opt/"
        remote_src: true
        owner: root
        group: root
        mode: "0755"

    - name: "Create a symbolic link for Borg"
      ansible.builtin.file:
        state: link
        src: "/opt/borg-dir/borg.exe"
        dest: "/usr/bin/borg"

# A workaround for maxhoesel.borgbackup.borgmatic that does not support custom paths
- name: "Create symbolic links for Borgmatic executables"
  loop:
    - borgmatic
    - generate-borgmatic-config
    - validate-borgmatic-config
  ansible.builtin.file:
    state: link
    src: "{{ borgmatic_pipx_bin_dir }}/{{ item }}"
    dest: /usr/bin/{{ item }}

- name: "Configure Borgmatic"
  ansible.builtin.include_role:
    name: maxhoesel.borgbackup.borgmatic
  vars:
    borgmatic_install: false  # we handle installation separately to get the recent version
    borgmatic_ssh_key_gen_options: "-t ed25519 -a 100"
    borgmatic_schedule_on: "{{ borgmatic_schedule_oncalendar }}"
    borgmatic_schedule_max_random_delay: 600
    borgmatic_config:
      source_directories: "{{ borg_source_directories }}"
      repositories:
        - path: "{{ borg_repo_path }}"
          label: "{{ borg_repo_label }}"
      encryption_passphrase: "{{ borg_encryption_passphrase }}"
      # archive keeping configuration
      keep_hourly: 24
      keep_daily: 7
      keep_weekly: 4
      keep_monthly: 6
      compression: lz4
      # output configuration
      list_details: true
      statistics: true
      exclude_caches: true
      # logging verbosity:
      verbosity: 1
      syslog_verbosity: 1
      monitoring_verbosity: 1
      # consistency:
      checks:
        - name: repository
        - name: archives
      check_last: 3
      # used for compatibility with the Borgmatic-endorsed Loki dashboard
      before_backup:
        - echo "Starting a backup job."
      after_backup:
        - echo "Backup created."
      on_error:
        - echo "Error while creating a backup."
      # monitoring integrations
      # uptime_kuma:
      #   push_url: http://kuma.adm.local:3001/api/push/ZMi7Bd8kFV
      #   states:
      #     - finish
      # loki:
      #   url: http://loki.adm.local:3100/loki/api/v1/push
      #   labels:
      #     instance: borgmatic
      #     app: borgmatic
      #     hostname: __hostname
